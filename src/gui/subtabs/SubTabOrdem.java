package gui.subtabs;

import baseLib.GenericoComboBoxModel;
import baseLib.GenericoComboObject;
import baseLib.IBaseModel;
import baseLib.SysApoio;
import baseLib.SysProperties;
import business.facade.ExercitoFacade;
import control.support.ActorInterface;
import control.support.ActorInterfaceFactory;
import control.MapaControler;
import control.OrdemControler;
import control.OrdemControlerFloater;
import gui.TabBase;
import gui.services.IAcaoGui;
import java.awt.Component;
import java.awt.Dimension;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.TableModel;
import model.*;
import msgs.BaseMsgs;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import persistence.BundleManager;
import persistence.SettingsManager;

/**
 *
 * @author gurgel
 */
public class SubTabOrdem extends TabBase implements Serializable {

    private static final Log log = LogFactory.getLog(SubTabOrdem.class);
    private static final BundleManager labels = SettingsManager.getInstance().getBundleManager();
    private OrdemControler ordemControl;
    private OrdemControlerFloater ordemControlFloater;
    private List<Component> parametrosCombos = new ArrayList();
    private List<JLabel> parametrosLabels = new ArrayList();
    private ActorInterface actor;
    private JDialog dAjuda = new JDialog(new JFrame(), false);
    private JDialog dOrdem = new JDialog(new JFrame(), false);
    private SubTabTextArea stAjuda = new SubTabTextArea();
    private IAcaoGui parentTab;

    public SubTabOrdem(IAcaoGui parentTab, MapaControler mapaControl) {
        initComponents();
        //Basico do constructor
        this.setMapaControler(mapaControl);
        setTitle(labels.getString("ACAO"));
        setDica(labels.getString("ORDERNS.TOOLTIP"));
        this.parentTab = parentTab;

        iniciaConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMaster = new javax.swing.JPanel();
        detOrdens = new javax.swing.JScrollPane();
        jpDetOrdens = new javax.swing.JPanel();
        jpOrdens = new javax.swing.JPanel();
        cbPar11 = new javax.swing.JComboBox();
        cbPar12 = new javax.swing.JComboBox();
        cbPar13 = new javax.swing.JComboBox();
        cbPar14 = new javax.swing.JComboBox();
        cbPar15 = new javax.swing.JComboBox();
        cbPar16 = new javax.swing.JComboBox();
        cbPar17 = new javax.swing.JComboBox();
        jlPar11 = new javax.swing.JLabel();
        jlPar12 = new javax.swing.JLabel();
        jlPar13 = new javax.swing.JLabel();
        jlPar14 = new javax.swing.JLabel();
        jlPar15 = new javax.swing.JLabel();
        jlPar16 = new javax.swing.JLabel();
        jlPar17 = new javax.swing.JLabel();
        cbOrdem = new javax.swing.JComboBox();
        jbOk = new javax.swing.JButton();
        cbOrdersAll = new javax.swing.JCheckBox();
        cbOrdersDetach = new javax.swing.JCheckBox();
        jbHelp = new javax.swing.JButton();
        jbClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaOrdens = new javax.swing.JTable();

        detOrdens.setToolTipText(labels.getString("PERSONAGEM.ACOES.TOOLTIP")); // NOI18N

        jpOrdens.setBorder(javax.swing.BorderFactory.createTitledBorder(labels.getString("ORDENS"))); // NOI18N
        jpOrdens.setToolTipText(labels.getString("ORDENS.TOOLTIP")); // NOI18N

        cbPar11.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbPar12.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbPar13.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbPar14.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbPar15.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbPar16.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbPar17.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlPar11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlPar11.setLabelFor(cbPar11);
        jlPar11.setText("Par 01:"); // NOI18N

        jlPar12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlPar12.setLabelFor(cbPar12);
        jlPar12.setText("Par 02:"); // NOI18N

        jlPar13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlPar13.setLabelFor(cbPar13);
        jlPar13.setText("Par 03:"); // NOI18N

        jlPar14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlPar14.setLabelFor(cbPar14);
        jlPar14.setText("Par 04:"); // NOI18N

        jlPar15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlPar15.setLabelFor(cbPar15);
        jlPar15.setText("Par 05:"); // NOI18N

        jlPar16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlPar16.setLabelFor(cbPar16);
        jlPar16.setText("Par 06:"); // NOI18N

        jlPar17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlPar17.setLabelFor(cbPar17);
        jlPar17.setText("Par 07:"); // NOI18N

        cbOrdem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/right.gif"))); // NOI18N
        jbOk.setToolTipText(labels.getString("GRAVA.ACAO.TOOLTIP")); // NOI18N

        cbOrdersAll.setText(labels.getString("ALL")); // NOI18N
        cbOrdersAll.setToolTipText(labels.getString("PERSONAGEM.ORDENSALL.TOOLTIP")); // NOI18N
        cbOrdersAll.setActionCommand("cbOrdersAll"); // NOI18N
        cbOrdersAll.setName("cbOrdersAll"); // NOI18N

        cbOrdersDetach.setText(labels.getString("DETACH")); // NOI18N
        cbOrdersDetach.setToolTipText(labels.getString("PERSONAGEM.DETACH.TOOLTIP")); // NOI18N
        cbOrdersDetach.setActionCommand("cbOrdersDetach"); // NOI18N

        jbHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help_icon.gif"))); // NOI18N
        jbHelp.setToolTipText(labels.getString("PERSONAGEM.AJUDA.TOOLTIP")); // NOI18N
        jbHelp.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));

        jbClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/erase.png"))); // NOI18N
        jbClear.setToolTipText(labels.getString("PERSONAGEM.ERASE.TOOLTIP")); // NOI18N
        jbClear.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));

        javax.swing.GroupLayout jpOrdensLayout = new javax.swing.GroupLayout(jpOrdens);
        jpOrdens.setLayout(jpOrdensLayout);
        jpOrdensLayout.setHorizontalGroup(
            jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpOrdensLayout.createSequentialGroup()
                .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpOrdensLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jlPar11, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .addComponent(jlPar12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlPar13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlPar14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlPar15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlPar16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlPar17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbPar12, 0, 1, Short.MAX_VALUE)
                            .addComponent(cbPar13, 0, 0, Short.MAX_VALUE)
                            .addComponent(cbPar14, 0, 1, Short.MAX_VALUE)
                            .addComponent(cbPar15, 0, 1, Short.MAX_VALUE)
                            .addComponent(cbPar16, 0, 1, Short.MAX_VALUE)
                            .addComponent(cbPar17, 0, 1, Short.MAX_VALUE)
                            .addComponent(cbPar11, 0, 1, Short.MAX_VALUE)))
                    .addGroup(jpOrdensLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(cbOrdem, 0, 336, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbOrdersDetach)
                    .addComponent(jbOk)
                    .addComponent(cbOrdersAll)
                    .addGroup(jpOrdensLayout.createSequentialGroup()
                        .addComponent(jbHelp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClear)))
                .addContainerGap())
        );
        jpOrdensLayout.setVerticalGroup(
            jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOrdensLayout.createSequentialGroup()
                .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpOrdensLayout.createSequentialGroup()
                        .addComponent(cbOrdem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbPar11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPar11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlPar12)
                            .addComponent(cbPar12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbPar13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPar13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbPar14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPar14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbPar15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPar15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbPar16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPar16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbPar17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPar17)))
                    .addGroup(jpOrdensLayout.createSequentialGroup()
                        .addComponent(jbOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbHelp)
                            .addComponent(jbClear))
                        .addGap(4, 4, 4)
                        .addComponent(cbOrdersAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbOrdersDetach)))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(labels.getString("ACOES"))); // NOI18N
        jScrollPane1.setToolTipText(labels.getString("ACOES.TOOLTIP")); // NOI18N

        jtListaOrdens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ação", "Parâmetro"
            }
        ));
        jScrollPane1.setViewportView(jtListaOrdens);

        javax.swing.GroupLayout jpDetOrdensLayout = new javax.swing.GroupLayout(jpDetOrdens);
        jpDetOrdens.setLayout(jpDetOrdensLayout);
        jpDetOrdensLayout.setHorizontalGroup(
            jpDetOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpOrdens, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );
        jpDetOrdensLayout.setVerticalGroup(
            jpDetOrdensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDetOrdensLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpOrdens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        detOrdens.setViewportView(jpDetOrdens);

        javax.swing.GroupLayout jpMasterLayout = new javax.swing.GroupLayout(jpMaster);
        jpMaster.setLayout(jpMasterLayout);
        jpMasterLayout.setHorizontalGroup(
            jpMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMasterLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(detOrdens, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );
        jpMasterLayout.setVerticalGroup(
            jpMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMasterLayout.createSequentialGroup()
                .addComponent(detOrdens, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbOrdem;
    private javax.swing.JCheckBox cbOrdersAll;
    private javax.swing.JCheckBox cbOrdersDetach;
    private javax.swing.JComboBox cbPar11;
    private javax.swing.JComboBox cbPar12;
    private javax.swing.JComboBox cbPar13;
    private javax.swing.JComboBox cbPar14;
    private javax.swing.JComboBox cbPar15;
    private javax.swing.JComboBox cbPar16;
    private javax.swing.JComboBox cbPar17;
    private javax.swing.JScrollPane detOrdens;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbHelp;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlPar11;
    private javax.swing.JLabel jlPar12;
    private javax.swing.JLabel jlPar13;
    private javax.swing.JLabel jlPar14;
    private javax.swing.JLabel jlPar15;
    private javax.swing.JLabel jlPar16;
    private javax.swing.JLabel jlPar17;
    private javax.swing.JPanel jpDetOrdens;
    private javax.swing.JPanel jpMaster;
    private javax.swing.JPanel jpOrdens;
    private javax.swing.JTable jtListaOrdens;
    // End of variables declaration//GEN-END:variables

    /*
     * Constantes para busca das chaves no banco.
     */
    private static final String ALIANCA = "Alianca";
    private static final String ARTEFATO_CARRIED = "Artefato_Carried";
    private static final String ARTEFATO_CARRIED_SCRY = "Artefato_Carried_Scry";
    private static final String ARTEFATO_CARRIED_SUMMON = "Artefato_Carried_Summon";
    private static final String ARTEFATO_CARRIED_DRAGONEGG = "Artefato_Carried_Dragonegg";
    private static final String ARTEFATO_NACAO_DROP = "Artefato_Nacao_Drop";
    private static final String ARTEFATO_NONACAO = "Artefato_NoNacao";
    private static final String ARTEFATO_ALL = "Artefato_All";
    private static final String CIDADE_ANY = "Cidade_Any";
    private static final String CIDADE_NACAO = "Cidade_Nacao";
    private static final String CIDADE_NEWCAPITAL = "Cidade_NewCapital";
    private static final String COORDENADA = "Coordenada";
    private static final String COORDENADAW = "CoordenadaW";
    private static final String COORDENADA_12 = "Coordenada_12";
    private static final String COORDENADA_8 = "Coordenada_8";
    private static final String COORDENADA_8W = "Coordenada_8W";
    private static final String COORDENADA_NAVIO = "Coordenada_Navio";
    private static final String DIRECAO = "Direcao";
    private static final String DIRECAO_EX = "Direcao_Ex";
    private static final String EVASIVO = "Evasivo";
    private static final String MALE_FEMALE = "Male_Female";
    private static final String MAGIA_ALL = "Magia_All";
    private static final String MAGIA_KNOWN = "Magia_Known";
    private static final String MAGIA_PRE = "Magia_Pre";
    private static final String NACAO = "Nacao";
    private static final String NACAO_RELACIONAMENTO = "Nacao_Relacionamento";
    private static final String NOME = "Nome";
    private static final String NO_VALUE = "None";
    private static final String OURO = "Ouro";
    private static final String PERCENTAGE = "Percentage";
    private static final String PERSONAGEM_LOCAL_EX_COMANDANTE = "Personagem_Comandante_Ex";
    private static final String PERSONAGEM_LOCAL = "Personagem_Local";
    private static final String PERSONAGEM_LOCAL_SELF = "Personagem_Local_Self";
    private static final String PERSONAGEM_LOCAL_NACAO = "Personagem_Nacao_Local";
    private static final String PERSONAGEM_LOCAL_NONACAO = "Personagem_Local_NoNacao";
    private static final String PERSONAGEM_NONACAO = "Personagem_NoNacao";
    private static final String PERSONAGEM_NACAO = "Personagem_Nacao";
    private static final String PERSONAGEM_REFEM = "Personagem_Refem";
    private static final String PERSONAGEM_REFEM_NONACAO = "Personagem_Refem_NoNacao";
    private static final String PRODUTO = "Produto";
    private static final String PRODUTO_ALL = "Produto_All";
    private static final String PRODUTO_ARMADURA = "Produto_Armadura";
    private static final String PRODUTO_WEAPON = "Produto_Metal";
    private static final String QUANTIDADE = "Quantidade";
    private static final String RELACIONAMENTO_MUDA = "Relacionamento_Muda";
    private static final String REFEM = "Refem";
    private static final String SIM_NAO = "Sim_Nao";
    private static final String TATICA = "Tatica";
    private static final String TEXTO_20 = "Texto_20";
    private static final String TROPA_TIPO = "Tropa_Tipo";
    private static final String TROPA_TABLE = "Tropa_Table";
    private static final String TROPA_TABLE_TR = "Tropa_Table_Tr";
    private static final String TROPA_TABLE_GARRISON = "Tropa_Table_Garrison";
    private static final String VARIADO = "Variado";

    // FIM das Constantes para busca das chaves no banco.
    private void iniciaConfig() {
        //Cria o Controle da lista de Ordens
        ordemControl = new OrdemControler(this);
        ordemControlFloater = new OrdemControlerFloater(this);

        //Monta lista de parametros para usar nos replaces
        parametrosCombos.add(cbPar11);
        parametrosCombos.add(cbPar12);
        parametrosCombos.add(cbPar13);
        parametrosCombos.add(cbPar14);
        parametrosCombos.add(cbPar15);
        parametrosCombos.add(cbPar16);
        parametrosCombos.add(cbPar17);
        parametrosLabels.add(jlPar11);
        parametrosLabels.add(jlPar12);
        parametrosLabels.add(jlPar13);
        parametrosLabels.add(jlPar14);
        parametrosLabels.add(jlPar15);
        parametrosLabels.add(jlPar16);
        parametrosLabels.add(jlPar17);
        doParametrosHideAll();

        //configura grid
        jtListaOrdens.setAutoCreateColumnsFromModel(true);
        jtListaOrdens.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jtListaOrdens.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jtListaOrdens.setAutoCreateRowSorter(true);

        //configura jDialog
        stAjuda.setFontMonospaced();
        dAjuda.add(stAjuda);
        dAjuda.setTitle(labels.getString("AJUDA"));
        dAjuda.setAlwaysOnTop(true);
        dAjuda.setPreferredSize(new Dimension(300, 600));
        dAjuda.setLocationRelativeTo(this.jtListaOrdens);
        //monta a floating window para ordens
        dOrdem.setTitle(labels.getString("ACOES.DISPONIVEL"));
        dOrdem.setAlwaysOnTop(true);
        dOrdem.setPreferredSize(new Dimension(400, 500));
        dOrdem.addComponentListener(ordemControlFloater);
        dOrdem.setName("dOrdem");

        //configs gerais das ordens
        jbOk.setActionCommand("jbOk");
        cbOrdem.setActionCommand("cbOrdem");
        cbOrdersAll.setActionCommand("cbOrdersAll");
        jbHelp.setActionCommand("jbHelp");
        jbClear.setActionCommand("jbClear");
        cbOrdersDetach.setActionCommand("cbOrdersDetach");

        doDisableFields();

        //adiciona listeners
        jtListaOrdens.getSelectionModel().addListSelectionListener(ordemControl);
        cbOrdem.addItemListener(ordemControl);
        cbOrdersAll.addItemListener(ordemControl);
        jbOk.addActionListener(ordemControl);
        cbOrdersAll.addItemListener(ordemControl);
        jbHelp.addActionListener(ordemControl);
        jbClear.addActionListener(ordemControl);
        cbOrdersDetach.addItemListener(ordemControl);

        this.setDefaultButton(jbOk);
    }

    public ActorInterface getActor() {
        return actor;
    }

    private boolean isAllSelected() {
        return this.cbOrdersAll.isSelected();
    }

    private void setOrdensModel(TableModel model) {
        if (model == null) {
            jtListaOrdens.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                {null, null},
                {null, null},
                {null, null}},
                    new String[]{
                labels.getString("ACAO"), labels.getString("PARAMETRO")
            }));
        } else {
            this.jtListaOrdens.setModel(model);
//            calcColumnWidths(jtListaOrdens);
        }
    }

    public void setOrdemParametrosQuadro(GenericoComboObject itemSelecionado) {
        //esconde todo mundo
        doParametrosHideAll();
        try {
            Ordem ordemSelecionada = (Ordem) itemSelecionado.getObject();
            GroupLayout parLayout = (GroupLayout) jpOrdens.getLayout();
            String vlParametro;
            //exibe a quantidade correta de parametros
            int qtParametroMax = ordemSelecionada.getParametrosIdeQtd();
            for (int nn = 0; nn < qtParametroMax; nn++) {
                //ajusta os labels
                doParametroLabel((JLabel) parametrosLabels.get(nn), ordemSelecionada.getParametroIdeDisplay(nn));
                //recupera valor display do parametro
                vlParametro = ordemControl.getParametroDisplay(nn);
                //pega parametro novo para posicao
                Component cNovo = getParametroComponent(
                        ordemSelecionada.getParametroIde(nn), vlParametro,
                        ordemSelecionada, ordemControl.getPersonagemOrdem(), nn);
                //atualiza a tela e a lista de rastreamento com o novo componente
                parLayout.replace((Component) parametrosCombos.get(nn), cNovo);
                parametrosCombos.set(nn, cNovo);
            }
            this.setLastHelp(ordemControl.getOrdemAjuda(ordemSelecionada));
            jbOk.setEnabled(true);
        } catch (NullPointerException ex) {
            doDisableFields();
        }
    }

    private Component getOrdemParametrosMagia(GenericoComboObject magiaSelecionada) {
        Component cNovo = new JLabel(labels.getString("CONTROLE.NAO.IMPLEMENTADO"));
        try {
            Feitico magia;
            if (magiaSelecionada.getObject() instanceof Feitico) {
                magia = (Feitico) magiaSelecionada.getObject();
            } else {
                magia = ((PersonagemFeitico) magiaSelecionada.getObject()).getFeitico();
            }
            if ("None".equals(magia.getParametroChave())) {
                cNovo.setVisible(false);
            } else {
                //recupera valor display do parametro da magia
                int nn = 1;
                String vlParametro = ordemControl.getParametroDisplay(nn);
                //pega parametro novo para posicao. Ordem nao importa (=null)
                //recursividade controlada.
                cNovo = getParametroComponent(magia.getParametroChave(),
                        vlParametro, null, null, nn);
            }
        } catch (NullPointerException e) {
            cNovo.setVisible(false);
        }
        return cNovo;
    }

    public void setOrdemParametrosMagia(GenericoComboObject magiaSelecionada) {
        int nn = 1;
        GroupLayout parLayout = (GroupLayout) jpOrdens.getLayout();
        //ajusta os labels
        Feitico magia;
        if (magiaSelecionada.getObject() instanceof Feitico) {
            magia = (Feitico) magiaSelecionada.getObject();
        } else {
            magia = ((PersonagemFeitico) magiaSelecionada.getObject()).getFeitico();
        }
        if ("None".equals(magia.getParametroChave())) {
            //esconde o parametro 1
            parametrosLabels.get(nn).setVisible(false);
            parametrosCombos.get(nn).setVisible(false);
        } else {
            doParametroLabel((JLabel) parametrosLabels.get(nn), magia.getParametroLabel());
            Component cNovo = getOrdemParametrosMagia(magiaSelecionada);
            //atualiza a tela e a lista de rastreamento com o novo componente
            parLayout.replace((Component) parametrosCombos.get(nn), cNovo);
            parametrosCombos.set(nn, cNovo);
        }
    }

    public PersonagemOrdem getOrdemQuadro() throws NullPointerException {
        Ordem ordem;
        ordem = (Ordem) ((GenericoComboObject) cbOrdem.getModel().getSelectedItem()).getObject();
        List<String> parId = new ArrayList();
        List<String> parDisplay = new ArrayList();
        //adiciona a ordem na primeira posicao
        //adiciona os parametros
        String tempId = " ", tempDisplay = " ";
        for (int ii = 0; ii < parametrosCombos.size(); ii++) {
            if (((Component) parametrosCombos.get(ii)).isVisible()) {
                try {
                    if (parametrosCombos.get(ii) instanceof JComboBox) {
                        JComboBox cb = (JComboBox) parametrosCombos.get(ii);
                        try {
                            IBaseModel par = (IBaseModel) cb.getModel().getSelectedItem();
                            tempId = par.getComboId();
                            tempDisplay = par.getComboDisplay();
                        } catch (ClassCastException ex) {
                            String par = (String) cb.getModel().getSelectedItem();
                            tempId = par;
                            tempDisplay = par;
                        }
                    } else if (parametrosCombos.get(ii) instanceof JTextField) {
                        JTextField par = (JTextField) parametrosCombos.get(ii);
                        tempId = par.getText();
                        tempDisplay = par.getText();
                    } else if (parametrosCombos.get(ii) instanceof SubTabDirecaoExercito) {
                        SubTabDirecaoExercito par = (SubTabDirecaoExercito) parametrosCombos.get(ii);
                        tempId = par.getDirecoesIdTipo();
                        tempDisplay = par.getDirecaoDisplay();
                    } else if (parametrosCombos.get(ii) instanceof SubTabTropas) {
                        SubTabTropas par = (SubTabTropas) parametrosCombos.get(ii);
                        tempId = par.getTropasId();
                        tempDisplay = par.getTropasDisplay();
                    } else if (parametrosCombos.get(ii) instanceof SubTabCoordenadas) {
                        SubTabCoordenadas temp = (SubTabCoordenadas) parametrosCombos.get(ii);
                        IBaseModel par = temp.getCoordenadaSelected();
                        tempId = par.getComboId();
                        tempDisplay = par.getComboDisplay();
                    } else if (parametrosCombos.get(ii) instanceof SubTabRelacionamento) {
                        SubTabRelacionamento temp = (SubTabRelacionamento) parametrosCombos.get(ii);
                        tempId = temp.getParametrosId();
                        tempDisplay = temp.getParametrosDisplay();
                    }
                } catch (NullPointerException ex) {
                    //algum parametro nao foi informado.
                    tempId = " ";
                    tempDisplay = " ";
                    log.info(labels.getString("FALTANDO.PARAMETRO") + ex);
                }
                parId.add(SysApoio.removeAcentos(tempId));
                parDisplay.add(tempDisplay);
            }
        }
        PersonagemOrdem po = new PersonagemOrdem();
        po.setNome(this.getActor().getNome());
        po.setOrdem(ordem);
        po.setParametrosDisplay(parDisplay);
        po.setParametrosId(parId);
        return po;
    }

    /**
     * Prepara o componente do parametro da ordem [JComboBox ou
     * JFormattedTextField]
     *
     * @param controle
     * @return componente
     */
//    private Component get ParametroComponent(String controle, String vlInicial,
//            Ordem ordemSelecionada, Ordem ordemGravada) {
    private Component getParametroComponent(String controle, String vlInicial,
            Ordem ordemSelecionada, PersonagemOrdem ordemGravada, int nuParametro) {
        Ordem actorOrdemGravada;
        try {
            actorOrdemGravada = ordemGravada.getOrdem();
        } catch (NullPointerException e) {
            actorOrdemGravada = null;
        }
        Component cNovo = new JLabel(labels.getString("CONTROLE.NAO.IMPLEMENTADO"));
        if (controle.equals(ALIANCA)) {            //Alianca
            //FIXME: carregar do cenario, nao utilizada no grecia
            JComboBox cbTemp = new JComboBox(new GenericoComboBoxModel(
                    new String[][]{
                {labels.getString("ALIANCA.SERVOS.NEGROS"), "sn"},
                {labels.getString("ALIANCA.NEUTROS"), "ne"},
                {labels.getString("ALIANCA.POVOS.LIVRES"), "pl"}
            }));
            cNovo = cbTemp;
        } else if (controle.equals(ARTEFATO_ALL)) {            //Artefato-All
            //é um combo com TODOS os artefatos
            JComboBox cbTemp = new JComboBox(getActor().getArtefatoComboModel(0));
            cNovo = cbTemp;
        } else if (controle.equals(ARTEFATO_CARRIED)) {            //Artefato-Carried
            //é um combo com os artefatos que o actor possui
            JComboBox cbTemp;
            if (isAllSelected()) {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(0));
            } else {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(1));
            }
            cNovo = cbTemp;
        } else if (controle.equals(ARTEFATO_CARRIED_SCRY)) {            //Artefato-Carried
            //é um combo com os artefatos que o actor possui
            JComboBox cbTemp;
            if (isAllSelected()) {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(0));
            } else {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(4));
            }
            cNovo = cbTemp;
        } else if (controle.equals(ARTEFATO_CARRIED_SUMMON)) {            //Artefato-Carried
            //é um combo com os artefatos que o actor possui
            JComboBox cbTemp;
            if (isAllSelected()) {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(0));
            } else {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(5));
            }
            cNovo = cbTemp;
        } else if (controle.equals(ARTEFATO_CARRIED_DRAGONEGG)) {            //Artefato-Carried
            //é um combo com os artefatos que o actor possui
            JComboBox cbTemp;
            if (isAllSelected()) {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(0));
            } else {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(6));
            }
            cNovo = cbTemp;
        } else if (controle.equals(ARTEFATO_NACAO_DROP)) {            //Artefato-Nacao-Drop
            //é um combo com os artefatos que a nacao possui
            JComboBox cbTemp = new JComboBox(getActor().getArtefatoComboModel(2));
            cNovo = cbTemp;
        } else if (controle.equals(ARTEFATO_NONACAO)) {            //Artefato-NoNacao
            //é um combo com os artefatos que a nacao NAO possui
            JComboBox cbTemp;
            if (isAllSelected()) {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(0));
            } else {
                cbTemp = new JComboBox(getActor().getArtefatoComboModel(3));
            }
            cNovo = cbTemp;
        } else if (controle.equals(CIDADE_ANY)) {            //Cidade-ANY
            if (isAllSelected()) {
                //Inputbox
                JFormattedTextField jtTemp = new JFormattedTextField(
                        SysApoio.createFormatter("####"));
                jtTemp.setName("jtCidadeAny"); // NOI18N
                jtTemp.setColumns(4);
                cNovo = jtTemp;
            } else {
                //é um combo com o model com os personagens conhecidos no local da mesma nacao
                JComboBox cbTemp = new JComboBox(getActor().getCidadeComboModel(0));
                cNovo = cbTemp;
            }
        } else if (controle.equals(CIDADE_NACAO)) {            //Cidade-Nacao
            if (isAllSelected()) {
                //Inputbox
                JFormattedTextField jtTemp = new JFormattedTextField(
                        SysApoio.createFormatter("####"));
                jtTemp.setName("jtCidadeNacao"); // NOI18N
                jtTemp.setColumns(4);
                cNovo = jtTemp;
            } else {
                //é um combo com o model com os personagens conhecidos no local da mesma nacao
                JComboBox cbTemp = new JComboBox(getActor().getCidadeComboModel(1));
                cNovo = cbTemp;
            }
        } else if (controle.equals(CIDADE_NEWCAPITAL)) {            //Cidade-NewCapital
            //Inputbox
            JFormattedTextField jtTemp = new JFormattedTextField(
                    SysApoio.createFormatter("####"));
            jtTemp.setName("jtCidadeNewCapital"); // NOI18N
            jtTemp.setColumns(4);
            cNovo = jtTemp;
        } else if (controle.equals(COORDENADA)) {            //Coordenada
            //Novo combobox com locais dentro do range
            final int range = 9999;
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabCoordenadas jpTemp = new SubTabCoordenadas(vlDefault, getActor().getLocal(),
                    range, isAllSelected(), false, this.getMapaControler());
            cNovo = jpTemp;
        } else if (controle.equals(COORDENADAW)) {            //Coordenada
            //Novo combobox com locais dentro do range
            final int range = 9999;
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabCoordenadas jpTemp = new SubTabCoordenadas(vlDefault, getActor().getLocal(),
                    range, isAllSelected(), true, this.getMapaControler());
            cNovo = jpTemp;
        } else if (controle.equals(COORDENADA_8)) {            //Coordenada-8
            //Novo combobox com locais dentro do range
            final int range = 8;
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabCoordenadas jpTemp = new SubTabCoordenadas(vlDefault, getActor().getLocal(),
                    range, isAllSelected(), false, this.getMapaControler());
            cNovo = jpTemp;
        } else if (controle.equals(COORDENADA_8W)) {            //Coordenada-8
            //Novo combobox com locais dentro do range
            final int range = 8;
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabCoordenadas jpTemp = new SubTabCoordenadas(vlDefault, getActor().getLocal(),
                    range, isAllSelected(), true, this.getMapaControler());
            cNovo = jpTemp;
        } else if (controle.equals(COORDENADA_12)) {
            //Coordenada-12
            //Novo combobox com locais dentro do range
            final int range = 12;
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabCoordenadas jpTemp = new SubTabCoordenadas(vlDefault, getActor().getLocal(),
                    range, isAllSelected(), false, this.getMapaControler());
            cNovo = jpTemp;
        } else if (controle.equals(COORDENADA_NAVIO)) {            //Coordenada-Navio
            //Inputbox
            JFormattedTextField jtTemp = new JFormattedTextField(
                    SysApoio.createFormatter("####"));
            jtTemp.setName("jtCoordenadaNavio"); // NOI18N
            jtTemp.setColumns(4);
            cNovo = jtTemp;
        } else if (controle.equals(DIRECAO)) {            //Direcao
            //é um combo com as direcoes validas
            JComboBox cbTemp = new JComboBox(new GenericoComboBoxModel(BaseMsgs.direcoes));
            cNovo = cbTemp;
        } else if (controle.equals(DIRECAO_EX)) {    //Direcao-Ex
            //PENDING: Fazer uma rosa dos ventos?
            SubTabDirecaoExercito jpTemp = new SubTabDirecaoExercito(
                    vlInicial, this.getActor(), this.getMapaControler(), ordemSelecionada, isAllSelected());
            cNovo = jpTemp;
        } else if (controle.equals(EVASIVO)) {            //Evasivo
            //é um combo male/female
            JComboBox cbTemp = new JComboBox(new GenericoComboBoxModel(
                    new String[][]{
                {labels.getString("NORMAL"), "nr"},
                {labels.getString("EVASIVO"), "EV"}
            }));
            cNovo = cbTemp;
        } else if (controle.equals(MALE_FEMALE)) {            //M/F
            //é um combo male/female
            JComboBox cbTemp = new JComboBox(new GenericoComboBoxModel(
                    new String[][]{
                {labels.getString("MASCULINO"), "m"},
                {labels.getString("FEMININO"), "f"}
            }));
            cNovo = cbTemp;
        } else if (controle.equals(MAGIA_ALL)) {//Magia-All
            //é um combo com o model magia, todas as magias que o actor nao tem
            JComboBox cbTemp = new JComboBox(getActor().getFeiticoComboModel(0));
            cNovo = cbTemp;
        } else if (controle.equals(MAGIA_PRE)) {//Magia-Pre
            //é um combo com o model magia, todas as magias que o actor pode aprender
            //PENDING: filtrar magias por pre-requisito, talvez livro.
            int filtro = 2;
            if (isAllSelected()) {
                filtro = 1;
            }
            JComboBox cbTemp = new JComboBox(getActor().getFeiticoComboModel(filtro));
            cNovo = cbTemp;
        } else if (controle.equals(MAGIA_KNOWN)) {//Magia-Known
            //é um combo com o model magia do actor para a ordem
            JComboBox cbTemp = new JComboBox(getActor().getFeiticoComboModelByOrdem(ordemSelecionada, isAllSelected()));
            cbTemp.setActionCommand("jcMagia");
            cbTemp.addActionListener(ordemControl);
            cNovo = cbTemp;
        } else if (controle.equals(NACAO)) {//Nacao
            //é um combo com o model nacao, menos a nacao do actor
            JComboBox cbNacao = new JComboBox(getActor().getNacaoComboModel());
            cNovo = cbNacao;
        } else if (controle.equals(NACAO_RELACIONAMENTO)) {//Nacao_RELACIONAMENTO
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabRelacionamento jpTemp = new SubTabRelacionamento(vlDefault, getActor().getNacao(),
                    getActor().getNacaoComboModel(), isAllSelected());
            cNovo = jpTemp;
        } else if (controle.equals(NOME)) {//Nome
            //Inputbox
            JFormattedTextField jtTemp = new JFormattedTextField(
                    SysApoio.createFormatterName("U*******************"));
            jtTemp.setColumns(20);
            cNovo = jtTemp;
        } else if (controle.equals(NO_VALUE)) {         //None
            //Nao deveria ocorrer nunca para uma ordem. Ocorre para algumas magias.
            //Esconder o parametro 1
            throw new UnsupportedOperationException(labels.getString("NOT.IMPLEMENTED"));
        } else if (controle.equals(OURO)) {//Ouro
            //Inputbox
            JFormattedTextField jtTemp = new JFormattedTextField(SysApoio.createFormatterInteger(0, 999999));
            jtTemp.setName("jtOuro"); // NOI18N
            jtTemp.setColumns(5);
            cNovo = jtTemp;
        } else if (controle.equals(PERCENTAGE)) {//Percentage
            //Inputbox
            JFormattedTextField jtTemp = new JFormattedTextField(SysApoio.createFormatterInteger(1, 100));
            //jtTemp.setName("jtPercentage"); // NOI18N
            jtTemp.setColumns(3);
            jtTemp.setText("100");
            cNovo = jtTemp;
        } else if (controle.equals(PERSONAGEM_LOCAL_EX_COMANDANTE)) {//Personagem-Comandante-Ex
            //é um combo com o model com os personagens da mesma nacao conhecidos que comandam exercitos
            JComboBox cbTemp = new JComboBox(getActor().getPersonagensComboModel(1));
            cNovo = cbTemp;
        } else if (controle.equals(PERSONAGEM_LOCAL)) {//Personagem-Local
            //é um combo com o model com os personagens conhecidos no local, independente da nacao.
            JComboBox cbTemp = new JComboBox(getActor().getPersonagensComboModel(2));
            cbTemp.setEditable(true);
            cNovo = cbTemp;
        } else if (controle.equals(PERSONAGEM_LOCAL_NACAO)) {//Personagem-Nacao-Local
            //é um combo com o model com os personagens conhecidos no local da mesma nacao
            JComboBox cbTemp = new JComboBox(getActor().getPersonagensComboModel(3));
            cbTemp.setEditable(true);
            cNovo = cbTemp;
        } else if (controle.equals(PERSONAGEM_LOCAL_NONACAO)) {//Personagem-Local-NoNacao
            //é um combo com o model com os personagens conhecidos no local e de outra nacao
            JComboBox cbTemp = new JComboBox(getActor().getPersonagensComboModel(4));
            cbTemp.setEditable(true);
            cNovo = cbTemp;
        } else if (controle.equals(PERSONAGEM_LOCAL_SELF)) {//Personagem-Local
            //é um combo com o model com os personagens conhecidos no local, independente da nacao.
            JComboBox cbTemp = new JComboBox(getActor().getPersonagensComboModel(6));
            cbTemp.setEditable(true);
            cNovo = cbTemp;
        } else if (controle.equals(PERSONAGEM_NONACAO)) {//Personagem-NoNacao
            //é um combo com o model com os personagens conhecidos de outras nacoes
            JComboBox cbTemp = new JComboBox(getActor().getPersonagensComboModel(0));
            cbTemp.setEditable(true);
            cNovo = cbTemp;
        } else if (controle.equals(PERSONAGEM_NACAO)) { //Personagem-Nacao
            //é um combo com o model com os personagens conhecidos
            JComboBox cbTemp = new JComboBox(getActor().getPersonagensComboModel(5));
            cbTemp.setEditable(true);
            cNovo = cbTemp;
        } else if (controle.equals(PERSONAGEM_REFEM)) { //Personagem-Refem
            /*
             * FIXME: Refem nao ocorre no cenario 4. deixei pra depois
             */
        } else if (controle.equals(PERSONAGEM_REFEM_NONACAO)) { //Personagem-Refem-NoNacao
            /*
             * FIXME: Refem nao ocorre no cenario 4. deixei pra depois
             */
        } else if (controle.equals(PRODUTO)) {//Produto
            //é um combo com o model com as produtos do cenario, MENOS ouro
            JComboBox cbTemp = new JComboBox(getActor().getProdutoComboModel(1));
            cNovo = cbTemp;
        } else if (controle.equals(PRODUTO_ALL)) {//Produto-All
            //é um combo com o model com as produtos do cenario, inclusive ouro
            JComboBox cbTemp = new JComboBox(getActor().getProdutoComboModel(0));
            cNovo = cbTemp;
        } else if (controle.equals(PRODUTO_ARMADURA)) {//Produto-Armadura
            //é um combo com o model com as produtos do cenario
            JComboBox cbTemp = new JComboBox(getActor().getProdutoComboModel(2));
            cNovo = cbTemp;
        } else if (controle.equals(PRODUTO_WEAPON)) {//Produto-Metal
            //é um combo com o model com as produtos do cenario
            JComboBox cbTemp = new JComboBox(getActor().getProdutoComboModel(3));
            cNovo = cbTemp;
        } else if (controle.equals(QUANTIDADE)) {//Quantidade
            //Inputbox
            JFormattedTextField jtTemp = new JFormattedTextField(SysApoio.createFormatterInteger(0, 999999));
            jtTemp.setColumns(5);
            cNovo = jtTemp;
        } else if (controle.equals(RELACIONAMENTO_MUDA)) {//Relacionamento_Muda
            //é um combo Melhora/Piora
            JComboBox cbTemp = new JComboBox(new GenericoComboBoxModel(
                    new String[][]{
                {labels.getString("MELHORAR"), "1"},
                {labels.getString("REBAIXAR"), "-1"}}));
            cNovo = cbTemp;
        } else if (controle.equals(REFEM)) { //Refem
            /*
             * FIXME: Refem nao ocorre no cenario 4. deixei pra depois
             */
        } else if (controle.equals(SIM_NAO)) {//Sim_Nao
            //é um combo sim/nao 
            JComboBox cbTemp = new JComboBox(new GenericoComboBoxModel(
                    new String[][]{
                {labels.getString("SIM"), "Sim"},
                {labels.getString("NAO"), "Nao"}
            }));
            cNovo = cbTemp;
        } else if (controle.equals(TATICA)) {//Tatica
            //é um combo com o model com as taticas do cenario
            JComboBox cbTemp = new JComboBox(ordemControl.getTaticasComboModel());
            cNovo = cbTemp;
        } else if (controle.equals(TEXTO_20)) {//Texto-20
            //Inputbox
            JFormattedTextField jtTemp = new JFormattedTextField(
                    SysApoio.createFormatter("********************"));
            jtTemp.setColumns(20);
            cNovo = jtTemp;
        } else if (controle.equals(TROPA_TIPO)) {//Tropa-Tipo
            //é um combo com o model com os tipos de tropa que a nacao pode recrutar
            JComboBox cbTemp;
            if (isAllSelected()) {
                cbTemp = new JComboBox(getActor().getTropaTipoComboModel(0));
            } else {
                cbTemp = new JComboBox(getActor().getTropaTipoComboModel(1));
            }
            cNovo = cbTemp;
        } else if (controle.equals(TROPA_TABLE)) {//Tropa-Table
            //é uma table com o model com os tipos de tropa do cenario + quantidade
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabTropas jpTemp = new SubTabTropas(vlDefault, this.getActor().getExercito(), isAllSelected(), 1);
            cNovo = jpTemp;
        } else if (controle.equals(TROPA_TABLE_TR)) {//Tropa-Table
            //é uma table com o model com os tipos de tropa que podem transferir + quantidade
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            SubTabTropas jpTemp = new SubTabTropas(vlDefault, this.getActor().getExercito(), isAllSelected(), 2);
            cNovo = jpTemp;
        } else if (controle.equals(TROPA_TABLE_GARRISON)) {//Tropa-Table
            //é uma table com o model com os tipos de tropa do cenario + quantidade
            String vlDefault = null;
            try {
                vlDefault = ordemGravada.getParametrosId().get(nuParametro);
            } catch (Exception e) {
                //do nothing if ANY exception happened
            }
            ExercitoFacade ef = new ExercitoFacade();
            Exercito guarnicao = ef.getGuarnicao(getActor().getNacao(), this.getActor().getLocal());
            SubTabTropas jpTemp = new SubTabTropas(vlDefault, guarnicao, isAllSelected(), 1);
            cNovo = jpTemp;
        } else if (controle.equals(VARIADO)) {//Variado
            //Variado eh para ser usado para definir o parametro da magia.
            //ordem de magia pode ter apeans um parametro para que o get(0) funcione.
            JComboBox jcMagia = (JComboBox) parametrosCombos.get(0);
            GenericoComboObject magiaSelecionada = (GenericoComboObject) jcMagia.getModel().getSelectedItem();
            if (magiaSelecionada != null) {
                cNovo = getOrdemParametrosMagia(magiaSelecionada);
                //caso especial, ajusta label.
                Feitico magia = ((PersonagemFeitico) magiaSelecionada.getObject()).getFeitico();
                if ("None".equals(magia.getParametroChave())) {
                    //esconde o parametro 1
                    parametrosLabels.get(1).setVisible(false);
                    parametrosCombos.get(1).setVisible(false);
                } else {
                    doParametroLabel((JLabel) parametrosLabels.get(1), magia.getParametroLabel());
                }
            } else {
                //nao tem parametros
                parametrosLabels.get(1).setVisible(false);
                parametrosCombos.get(1).setVisible(false);
                cNovo.setVisible(false);
            }
            //Inputbox
//            JFormattedTextField jtTemp = new JFormattedTextField(
//                    SysApoio.createFormatter("********************"));
//            jtTemp.setColumns(20);
//            cNovo = jtTemp;
        }
        //seleciona item default
        if (cNovo instanceof JComboBox) {
            JComboBox cbTemp = (JComboBox) cNovo;
            try {
                GenericoComboBoxModel gcbm = (GenericoComboBoxModel) cbTemp.getModel();
                if (!vlInicial.equals("")) {
                    int index = gcbm.getIndexByDisplay(vlInicial);
                    if (index == 0 && cbTemp.isEditable()) {
                        cbTemp.insertItemAt(vlInicial, 0);
                    }
                    cbTemp.setSelectedIndex(index);
                } else if (controle.equals(CIDADE_NACAO)) {
                    String actorLocal = getActor().getLocalCoordenadas();
                    int index = gcbm.getIndexById(actorLocal);
                    if (index == 0 && cbTemp.isEditable()) {
                        cbTemp.insertItemAt(actorLocal, 0);
                    }
                    cbTemp.setSelectedIndex(index);
                }
            } catch (ClassCastException ex) {
                log.info(ex);
            } catch (IllegalArgumentException ex) {
            } catch (NullPointerException ex) {
                //PENDING: nao tem nada pra selecionar, provavelmente nao pode dar esta ordem agora
                //log.info("JG: " + ex);
            }
        } else if (cNovo instanceof JFormattedTextField && ordemSelecionada == actorOrdemGravada) {
            JFormattedTextField jtTemp = (JFormattedTextField) cNovo;
            jtTemp.setText(vlInicial);
        }
        if (cNovo instanceof JLabel && ((JLabel) cNovo).getText().equals(labels.getString("CONTROLE.NAO.IMPLEMENTADO"))) {
            log.fatal(labels.getString("CONTROLE.NAO.IMPLEMENTADO") + controle);
        }
        return cNovo;
    }

    private void doParametroLabel(JLabel label, String texto) {
        label.setText(texto + ":");
        label.setVisible(true);
    }

    private void doParametrosHideAll() {
        //esconde todo mundo
        for (int nn = 0; nn < 7; nn++) {
            ((Component) parametrosCombos.get(nn)).setVisible(false);
            ((Component) parametrosLabels.get(nn)).setVisible(false);
        }
        this.getMapaControler().remMovementTag();
    }

    public void doDisplayAjuda() {
        //stAjuda.setTextBackground(new Color(236, 233, 216));
        //monta a floating window para ajuda
        dAjuda.pack();
        dAjuda.setVisible(true);
    }

    private void setLastHelp(String text) {
        this.stAjuda.setText(text);
    }

    public void doDetachOrders(boolean isShow) {
        if (isShow) {
            //change triggered by CheckBox
            if (cbOrdersDetach.isSelected()) {
                //monta a floating window para ordens
                dOrdem.add(this.jpDetOrdens);
                dOrdem.pack();
                dOrdem.setLocationRelativeTo(this.detOrdens);
                dOrdem.setVisible(true);
                this.detOrdens.repaint();
            } else {
                dOrdem.setVisible(false);
                detOrdens.setViewportView(jpDetOrdens);
            }
        } else {
            //closing dialog, forced to redraw
            cbOrdersDetach.setSelected(false);
            detOrdens.setViewportView(jpDetOrdens);
        }
    }

    public void doFindNextActionSlot() {
        if (!SysProperties.getProps("AutoMoveNextAction", "1").equals("1")) {
            return;
        }
        //testa se slot next actor
        for (int ii = 0; ii < this.jtListaOrdens.getModel().getRowCount(); ii++) {
            String valueAt = (String) this.jtListaOrdens.getModel().getValueAt(ii, 0);
            if (valueAt.equals(" ")) {
//                log.fatal("muda foco aki");
                this.jtListaOrdens.getSelectionModel().setSelectionInterval(ii, ii);
                break;
            }
        }
        //testa slot em outros personagens?
        //sem slot aberto, entao nao faz nada
    }

    public void setValueAt(String[] ordemDisplay, int ordIndex) {
        this.jtListaOrdens.getModel().setValueAt(ordemDisplay[0], ordIndex, 0);
        this.jtListaOrdens.getModel().setValueAt(ordemDisplay[1].replace('[', ' ').replace(']', ' ').trim(), ordIndex, 1);
        parentTab.setValueAt(ordemDisplay, ordIndex);
    }

    public void doOrdemClear() {
        this.getMapaControler().remMovementTag();
        doDisableFields();
        setOrdemParametrosQuadro(null);
    }

    public void doMudaActor(Personagem personagem) {
        this.actor = ActorInterfaceFactory.getInstance().getActorInterface(personagem);
        doMudaActor();
    }

    public void doMudaActor(Cidade cidade) {
        this.actor = ActorInterfaceFactory.getInstance().getActorInterface(cidade);
        doMudaActor();
    }

    public void doMudaActor(Nacao nacao) {
        this.actor = ActorInterfaceFactory.getInstance().getActorInterface(nacao);
        doMudaActor();
    }

    private void doMudaActor() {
        this.getMapaControler().remMovementTag();
        //ordens do actor
        setOrdensModel(getActor().getOrdemTableModel());
        //trigger selection and doMudaOrdem(0)
        jtListaOrdens.getSelectionModel().setSelectionInterval(0, 0);
    }

    public void doMudaOrdem(int indexOrdem) {
        if (getActor() == null) {
            log.fatal("Ator NULO!!!!!! quem nao setou.");
        }

        this.getMapaControler().remMovementTag();
        dOrdem.setTitle(labels.getString("ACOES.DISPONIVEL") + ": " + getActor().getNome());
        GenericoComboBoxModel model = getActor().getOrdemComboModel(indexOrdem, isAllSelected());
        this.cbOrdem.setModel(model);
        doEnableFields();
        //ve qual é a ordem para deixar selecionada na combo
        int oIndex = getActor().getOrdemComboIndex(indexOrdem, model);
        if (oIndex != 0) {
            //posiciona na ordem selecionada. O listener vai montar os parametros quando selecionar.
            cbOrdem.setSelectedIndex(oIndex);
        } else {
            //monta o quadro de parametros para a primeira ordem
            setOrdemParametrosQuadro((GenericoComboObject) model.getSelectedItem());
        }

        this.cbOrdem.requestFocusInWindow();
    }

    public JTable getOrdemLista() {
        return jtListaOrdens;
    }

    private void doDisableFields() {
        //se der erro, coloca um dummy.
        this.cbOrdem.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"                                                "}));
        this.cbOrdem.setEnabled(false);
        this.cbOrdersAll.setEnabled(false);
        jbHelp.setEnabled(false);
        jbClear.setEnabled(false);
        this.cbOrdersDetach.setEnabled(false);
        this.setLastHelp("");
        jbOk.setEnabled(false);
        jtListaOrdens.setEnabled(false);
    }

    private void doEnableFields() {
        jtListaOrdens.setEnabled(true);
        this.cbOrdem.setEnabled(true);
        this.cbOrdersAll.setEnabled(true);
        jbHelp.setEnabled(true);
        jbClear.setEnabled(true);
        this.cbOrdersDetach.setEnabled(true);
    }
}