/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * SubTabTextArea.java
 *
 * Created on 17/Abr/2011, 9:35:23
 */
package gui.subtabs;

import control.OrdemControlerFloater;
import gui.TabBase;
import gui.services.IPopupTabGui;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.io.Serializable;
import javax.swing.GroupLayout;
import javax.swing.JDialog;
import javax.swing.JFrame;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import persistenceCommons.BundleManager;
import persistenceCommons.SettingsManager;

/**
 *
 * @author jmoura
 */
public class SubTabPopup extends TabBase implements IPopupTabGui, Serializable {

    private static final Log log = LogFactory.getLog(SubTabPopup.class);
    private static final BundleManager labels = SettingsManager.getInstance().getBundleManager();
    private final JDialog dPopup = new JDialog(new JFrame(), false);
    private final SubTabTextArea stContent = new SubTabTextArea();
    private String guiConfig = "";

    /**
     * Creates new form SubTabTextArea
     */
    public SubTabPopup() {
        initComponents();
        iniciaConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbDetach = new javax.swing.JToggleButton();
        jMaster = new javax.swing.JScrollPane();

        jbDetach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/detach.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("labels"); // NOI18N
        jbDetach.setToolTipText(bundle.getString("PERSONAGEM.DETACH.TOOLTIP")); // NOI18N
        jbDetach.setFocusable(false);
        jbDetach.setMaximumSize(new java.awt.Dimension(23, 23));
        jbDetach.setMinimumSize(new java.awt.Dimension(23, 23));
        jbDetach.setPreferredSize(new java.awt.Dimension(23, 23));

        jMaster.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 392, Short.MAX_VALUE)
                .addComponent(jbDetach, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jMaster)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jbDetach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jMaster, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jMaster;
    private javax.swing.JToggleButton jbDetach;
    // End of variables declaration//GEN-END:variables

    private void iniciaConfig() {
        //monta a floating window para ordens
        final OrdemControlerFloater ordemControlFloater = new OrdemControlerFloater(this);
        dPopup.setTitle(labels.getString("INFORMATION.TITLE"));
        dPopup.setAlwaysOnTop(true);
        dPopup.setPreferredSize(new Dimension(400, 500));
        dPopup.addComponentListener(ordemControlFloater);
        dPopup.setName("dPopup");
        jbDetach.setActionCommand("jbDetach");
        jbDetach.addItemListener(ordemControlFloater);
        jMaster.setViewportView(stContent);
    }

    public void setText(String title, String text) {
        dPopup.setTitle(title);
        stContent.setText(text);
    }

    public void setTextBackground(Color color) {
        this.stContent.setBackground(color);
    }

    public void setFontMonospaced() {
        this.stContent.setFontMonospaced();
    }

    public void setFontText(Font f) {
        this.stContent.setFont(f);
    }

    public void replace(Component oldComponent) {
        GroupLayout parLayout = (GroupLayout) oldComponent.getParent().getLayout();
        parLayout.replace(oldComponent, this);

    }

    @Override
    public void doDetachTogglePopup() {
        //change triggered by CheckBox
        if (jbDetach.isSelected()) {
            doDetachPopup();
        } else {
            doAttachPopup();
        }
    }

    @Override
    public void doDetachPopup() {
        //monta a floating window para ordens
        dPopup.add(stContent);
        dPopup.pack();
        dPopup.setLocationRelativeTo(jMaster);
        dPopup.setVisible(true);
        jMaster.repaint();
        SettingsManager.getInstance().setConfigAndSaveToFile(getGuiConfig(), IPopupTabGui.POPUP_FLOATING);
    }

    @Override
    public void doAttachPopup() {
        //closing dialog, forced to redraw and detach
        dPopup.setVisible(false);
        jbDetach.setSelected(false);
        jMaster.setViewportView(stContent);
        SettingsManager.getInstance().setConfigAndSaveToFile(getGuiConfig(), IPopupTabGui.POPUP_DOCKED);
    }

    public void setGuiConfig(String guiConfig) {
        this.guiConfig = guiConfig;
    }

    @Override
    public String getGuiConfig() {
        return this.guiConfig;
    }
}
